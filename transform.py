#!/usr/bin
# a script transforming the graph's format
# the orginal format of the graph which is
# generated by Stanford SNAP library is:
#
# edge pairs = (node id, node id)
#
# the onject format is:
# node pairs = (edge_start, edge_width)
# edge pairs = (dest_node, weight)

import string

filename = "test.txt"


infile = open(filename, 'r')




infile.readline()
infile.readline()
line = infile.readline()
line = line[0:-1]
list = line.split(" ") 
node_num_str =  list[2]
#print node_num_str
edge_num_str =  list[4]
#print edge_num_str
infile.readline()



node_old = 0
source_id = 0
edges_dest = []
start = []
width = []
node_counter = 0
index = 0
start.append(str(index))


while True:
      line = infile.readline()
      if not line:
         width.append(str(node_counter))
         break
      
      line = line[0:-1]
      list = line.split('\t')
      #print list
      node_from = string.atoi(list[0])
      node_to = string.atoi(list[1]) 
      if node_from != node_old:
         
         start.append(index)
         width.append(node_counter)
         node_counter = 0
      
      node_old = node_from
      index += 1
      edges_dest.append(str(node_to))
      node_counter += 1

#print node_num_str
#print edge_num_str
#print edges_dest
#print start
#print width



outfile = open(filename + ".out", 'w')


outfile.write(node_num_str + '\n')


i = 0
while i < len(start):
      outfile.write(str(start[i]) + ' ')
      outfile.write(str(width[i]) + '\n')
      i += 1


outfile.write("\n")
outfile.write(str(source_id) + '\n\n')


outfile.write(edge_num_str + '\n')

i = 0
while i < len(edges_dest):
      outfile.write(edges_dest[i] + ' ')
      outfile.write("1\n")
      i += 1
      

print 'done'
